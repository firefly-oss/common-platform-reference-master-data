openapi: 3.0.1
info:
  title: common-platform-reference-master-data
  description: Reference Master Data Application
  contact:
    name: Catalis Development
    email: dev@catalis.com
  version: 1.0.0
servers:
  - url: 'http://core.catalis.vc/master-data'
    description: Development Environment
  - url: /
    description: Local Development Environment
tags:
  - name: Notification Message Localizations
    description: APIs for managing notification message localizations
  - name: Countries
    description: APIs for managing countries
  - name: Asset Type
    description: APIs for managing Asset Type data
  - name: Lookup Items
    description: APIs for managing lookup items
  - name: Notification Message Catalog
    description: APIs for managing notification message catalog
  - name: Notification Message Templates
    description: APIs for managing notification message templates
  - name: Identity Document Categories
    description: API for managing identity document categories
  - name: Contract Type
    description: APIs for managing Contract Type data
  - name: Legal Forms
    description: APIs for managing legal forms
  - name: Currencies
    description: APIs for managing currencies
  - name: Transaction Category Localization
    description: API for managing transaction category localizations
  - name: Lookup Domains
    description: APIs for managing lookup domains
  - name: Relationship Type Master
    description: APIs for managing Relationship Type Master data
  - name: Document Template Localizations
    description: APIs for managing document template localizations
  - name: Identity Documents
    description: API for managing identity documents
  - name: Document Template Types
    description: APIs for managing document template types
  - name: Document Templates
    description: APIs for managing document templates
  - name: ConsentCatalog
    description: APIs for managing consent catalog
  - name: Transaction Category Catalog
    description: API for managing transaction categories
  - name: Title Master
    description: APIs for managing Title Master data
  - name: Administrative Divisions
    description: APIs for managing administrative divisions
  - name: Activity Codes
    description: APIs for managing activity codes
  - name: Message Type Catalog
    description: APIs for managing message type catalog
  - name: Identity Document Localizations
    description: API for managing identity document localizations
  - name: BankInstitutionCodes
    description: APIs for managing bank or institution codes
  - name: LanguageLocale
    description: APIs for managing language/locale data
paths:
  '/api/v1/transaction-category-localizations/{localizationId}':
    get:
      tags:
        - Transaction Category Localization
      summary: Get Localization by ID
      description: Retrieve a transaction category localization by its ID.
      operationId: getTransactionCategoryLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the transaction category localization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the transaction category localization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryLocalizationDTO'
        '404':
          description: Transaction category localization not found
    put:
      tags:
        - Transaction Category Localization
      summary: Update Transaction Category Localization
      description: Update an existing transaction category localization.
      operationId: updateTransactionCategoryLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the transaction category localization to update
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryLocalizationDTO'
        required: true
      responses:
        '200':
          description: Transaction category localization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryLocalizationDTO'
        '400':
          description: Invalid input data
        '404':
          description: Transaction category localization not found
    delete:
      tags:
        - Transaction Category Localization
      summary: Delete Transaction Category Localization
      description: Delete a transaction category localization.
      operationId: deleteTransactionCategoryLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the transaction category localization to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Transaction category localization deleted successfully
        '404':
          description: Transaction category localization not found
  '/api/v1/transaction-categories/{categoryId}':
    get:
      tags:
        - Transaction Category Catalog
      summary: Get Transaction Category by ID
      description: Retrieve a transaction category by its ID.
      operationId: getTransactionCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the transaction category
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the transaction category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryCatalogDTO'
        '404':
          description: Transaction category not found
    put:
      tags:
        - Transaction Category Catalog
      summary: Update Transaction Category
      description: Update an existing transaction category.
      operationId: updateTransactionCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the transaction category to update
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryCatalogDTO'
        required: true
      responses:
        '200':
          description: Transaction category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryCatalogDTO'
        '400':
          description: Invalid input data
        '404':
          description: Transaction category not found
    delete:
      tags:
        - Transaction Category Catalog
      summary: Delete Transaction Category
      description: Delete a transaction category.
      operationId: deleteTransactionCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the transaction category to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Transaction category deleted successfully
        '404':
          description: Transaction category not found
  '/api/v1/titles/{titleId}':
    get:
      tags:
        - Title Master
      summary: Get Title by ID
      description: Retrieve a specific title by its ID.
      operationId: getTitle
      parameters:
        - name: titleId
          in: path
          description: ID of the title
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Title retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleMasterDTO'
        '404':
          description: Title not found
    put:
      tags:
        - Title Master
      summary: Update Title
      description: Update an existing title by its ID.
      operationId: updateTitle
      parameters:
        - name: titleId
          in: path
          description: ID of the title
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleMasterDTO'
        required: true
      responses:
        '200':
          description: Title updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleMasterDTO'
        '404':
          description: Title not found
    delete:
      tags:
        - Title Master
      summary: Delete Title
      description: Delete a specific title by its ID.
      operationId: deleteTitle
      parameters:
        - name: titleId
          in: path
          description: ID of the title
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Title deleted successfully
        '404':
          description: Title not found
  '/api/v1/relationship-types/{relationshipTypeId}':
    get:
      tags:
        - Relationship Type Master
      summary: Get Relationship Type by ID
      description: Retrieve a specific relationship type by its ID.
      operationId: getRelationshipType
      parameters:
        - name: relationshipTypeId
          in: path
          description: ID of the relationship type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Relationship type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipTypeMasterDTO'
        '404':
          description: Relationship type not found
    put:
      tags:
        - Relationship Type Master
      summary: Update Relationship Type
      description: Update an existing relationship type by its ID.
      operationId: updateRelationshipType
      parameters:
        - name: relationshipTypeId
          in: path
          description: ID of the relationship type
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipTypeMasterDTO'
        required: true
      responses:
        '200':
          description: Relationship type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipTypeMasterDTO'
        '404':
          description: Relationship type not found
    delete:
      tags:
        - Relationship Type Master
      summary: Delete Relationship Type
      description: Delete a specific relationship type by its ID.
      operationId: deleteRelationshipType
      parameters:
        - name: relationshipTypeId
          in: path
          description: ID of the relationship type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Relationship type deleted successfully
        '404':
          description: Relationship type not found
  '/api/v1/notification-templates/{templateId}':
    get:
      tags:
        - Notification Message Templates
      summary: Get Notification Message Template by ID
      description: Retrieve a specific notification message template by its ID.
      operationId: getNotificationMessageTemplate
      parameters:
        - name: templateId
          in: path
          description: ID of the notification message template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Notification message template retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageTemplateDTO'
        '404':
          description: Notification message template not found
    put:
      tags:
        - Notification Message Templates
      summary: Update Notification Message Template
      description: Update a specific notification message template by its ID.
      operationId: updateNotificationMessageTemplate
      parameters:
        - name: templateId
          in: path
          description: ID of the notification message template
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationMessageTemplateDTO'
        required: true
      responses:
        '200':
          description: Notification message template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageTemplateDTO'
        '400':
          description: Invalid input data
        '404':
          description: Notification message template not found
    delete:
      tags:
        - Notification Message Templates
      summary: Delete Notification Message Template
      description: Delete a specific notification message template by its ID.
      operationId: deleteNotificationMessageTemplate
      parameters:
        - name: templateId
          in: path
          description: ID of the notification message template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Notification message template deleted successfully
        '404':
          description: Notification message template not found
  '/api/v1/notification-messages/{messageId}':
    get:
      tags:
        - Notification Message Catalog
      summary: Get Notification Message by ID
      description: Retrieve a specific notification message by its ID.
      operationId: getNotificationMessage
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Notification message retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageCatalogDTO'
        '404':
          description: Notification message not found
    put:
      tags:
        - Notification Message Catalog
      summary: Update Notification Message
      description: Update a specific notification message by its ID.
      operationId: updateNotificationMessage
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationMessageCatalogDTO'
        required: true
      responses:
        '200':
          description: Notification message updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageCatalogDTO'
        '400':
          description: Invalid input data
        '404':
          description: Notification message not found
    delete:
      tags:
        - Notification Message Catalog
      summary: Delete Notification Message
      description: Delete a specific notification message by its ID.
      operationId: deleteNotificationMessage
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Notification message deleted successfully
        '404':
          description: Notification message not found
  '/api/v1/notification-localizations/{localizationId}':
    get:
      tags:
        - Notification Message Localizations
      summary: Get Notification Message Localization by ID
      description: Retrieve a specific notification message localization by its ID.
      operationId: getNotificationMessageLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the notification message localization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Notification message localization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
        '404':
          description: Notification message localization not found
    put:
      tags:
        - Notification Message Localizations
      summary: Update Notification Message Localization
      description: Update a specific notification message localization by its ID.
      operationId: updateNotificationMessageLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the notification message localization
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
        required: true
      responses:
        '200':
          description: Notification message localization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
        '400':
          description: Invalid input data
        '404':
          description: Notification message localization not found
    delete:
      tags:
        - Notification Message Localizations
      summary: Delete Notification Message Localization
      description: Delete a specific notification message localization by its ID.
      operationId: deleteNotificationMessageLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the notification message localization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Notification message localization deleted successfully
        '404':
          description: Notification message localization not found
  '/api/v1/message-types/{typeId}':
    get:
      tags:
        - Message Type Catalog
      summary: Get Message Type by ID
      description: Retrieve a specific message type by its ID.
      operationId: getMessageType
      parameters:
        - name: typeId
          in: path
          description: ID of the message type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Message type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTypeCatalogDTO'
        '404':
          description: Message type not found
    put:
      tags:
        - Message Type Catalog
      summary: Update Message Type
      description: Update a specific message type by its ID.
      operationId: updateMessageType
      parameters:
        - name: typeId
          in: path
          description: ID of the message type
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageTypeCatalogDTO'
        required: true
      responses:
        '200':
          description: Message type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTypeCatalogDTO'
        '400':
          description: Invalid input data
        '404':
          description: Message type not found
    delete:
      tags:
        - Message Type Catalog
      summary: Delete Message Type
      description: Delete a specific message type by its ID.
      operationId: deleteMessageType
      parameters:
        - name: typeId
          in: path
          description: ID of the message type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Message type deleted successfully
        '404':
          description: Message type not found
  '/api/v1/lookup/items/{itemId}':
    get:
      tags:
        - Lookup Items
      summary: Get Lookup Item by ID
      description: Retrieve a specific lookup item by its ID.
      operationId: getItem
      parameters:
        - name: itemId
          in: path
          description: ID of the lookup item
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lookup item retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupItemDTO'
        '404':
          description: Lookup item not found
    put:
      tags:
        - Lookup Items
      summary: Update Lookup Item
      description: Update an existing lookup item by its ID.
      operationId: updateItem
      parameters:
        - name: itemId
          in: path
          description: ID of the lookup item
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupItemDTO'
        required: true
      responses:
        '200':
          description: Lookup item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupItemDTO'
        '404':
          description: Lookup item not found
    delete:
      tags:
        - Lookup Items
      summary: Delete Lookup Item
      description: Delete a specific lookup item by its ID.
      operationId: deleteItem
      parameters:
        - name: itemId
          in: path
          description: ID of the lookup item
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Lookup item deleted successfully
        '404':
          description: Lookup item not found
  '/api/v1/lookup/domains/{domainId}':
    get:
      tags:
        - Lookup Domains
      summary: Get Lookup Domain by ID
      description: Retrieve a specific lookup domain by its ID.
      operationId: getDomain
      parameters:
        - name: domainId
          in: path
          description: ID of the lookup domain
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lookup domain retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupDomainDTO'
        '404':
          description: Lookup domain not found
    put:
      tags:
        - Lookup Domains
      summary: Update Lookup Domain
      description: Update an existing lookup domain by its ID.
      operationId: updateDomain
      parameters:
        - name: domainId
          in: path
          description: ID of the lookup domain
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupDomainDTO'
        required: true
      responses:
        '200':
          description: Lookup domain updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupDomainDTO'
        '404':
          description: Lookup domain not found
    delete:
      tags:
        - Lookup Domains
      summary: Delete Lookup Domain
      description: Delete a specific lookup domain by its ID.
      operationId: deleteDomain
      parameters:
        - name: domainId
          in: path
          description: ID of the lookup domain
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Lookup domain deleted successfully
        '404':
          description: Lookup domain not found
  '/api/v1/legal-forms/{legalFormId}':
    get:
      tags:
        - Legal Forms
      summary: Get Legal Form by ID
      description: Retrieve a specific legal form by its ID.
      operationId: getLegalForm
      parameters:
        - name: legalFormId
          in: path
          description: ID of the legal form
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Legal form retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalFormDTO'
        '404':
          description: Legal form not found
    put:
      tags:
        - Legal Forms
      summary: Update Legal Form
      description: Update an existing legal form by its ID.
      operationId: updateLegalForm
      parameters:
        - name: legalFormId
          in: path
          description: ID of the legal form
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalFormDTO'
        required: true
      responses:
        '200':
          description: Legal form updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalFormDTO'
        '404':
          description: Legal form not found
    delete:
      tags:
        - Legal Forms
      summary: Delete Legal Form
      description: Delete a specific legal form by its ID.
      operationId: deleteLegalForm
      parameters:
        - name: legalFormId
          in: path
          description: ID of the legal form
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Legal form deleted successfully
        '404':
          description: Legal form not found
  '/api/v1/language-locales/{id}':
    get:
      tags:
        - LanguageLocale
      summary: Get LanguageLocale by ID
      description: Retrieve a specific language/locale record by its ID.
      operationId: getLanguageLocale
      parameters:
        - name: id
          in: path
          description: ID of the languageLocale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: LanguageLocale retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageLocaleDTO'
        '404':
          description: LanguageLocale not found
    put:
      tags:
        - LanguageLocale
      summary: Update LanguageLocale
      description: Update an existing language/locale record by its ID.
      operationId: updateLanguageLocale
      parameters:
        - name: id
          in: path
          description: ID of the languageLocale
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageLocaleDTO'
        required: true
      responses:
        '200':
          description: LanguageLocale updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageLocaleDTO'
        '404':
          description: LanguageLocale not found
    delete:
      tags:
        - LanguageLocale
      summary: Delete LanguageLocale
      description: Delete a specific language/locale record by its ID.
      operationId: deleteLanguageLocale
      parameters:
        - name: id
          in: path
          description: ID of the languageLocale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: LanguageLocale entry deleted successfully
        '404':
          description: LanguageLocale not found
  '/api/v1/identity-documents/{documentId}':
    get:
      tags:
        - Identity Documents
      summary: Get Identity Document
      description: Get a specific identity document by its ID.
      operationId: getIdentityDocument
      parameters:
        - name: documentId
          in: path
          description: ID of the identity document
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the identity document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCatalogDTO'
        '404':
          description: Identity document not found
    put:
      tags:
        - Identity Documents
      summary: Update Identity Document
      description: Update a specific identity document by its ID.
      operationId: updateIdentityDocument
      parameters:
        - name: documentId
          in: path
          description: ID of the identity document
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityDocumentCatalogDTO'
        required: true
      responses:
        '200':
          description: Identity document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCatalogDTO'
        '400':
          description: Invalid input data
        '404':
          description: Identity document not found
    delete:
      tags:
        - Identity Documents
      summary: Delete Identity Document
      description: Delete a specific identity document by its ID.
      operationId: deleteIdentityDocument
      parameters:
        - name: documentId
          in: path
          description: ID of the identity document
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Identity document deleted successfully
        '404':
          description: Identity document not found
  '/api/v1/identity-document-localizations/{localizationId}':
    put:
      tags:
        - Identity Document Localizations
      summary: Update Identity Document Localization
      description: Update a specific identity document localization by its ID.
      operationId: updateIdentityDocumentLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the identity document localization
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityDocumentLocalizationDTO'
        required: true
      responses:
        '200':
          description: Identity document localization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentLocalizationDTO'
        '400':
          description: Invalid input data
        '404':
          description: Identity document localization not found
    delete:
      tags:
        - Identity Document Localizations
      summary: Delete Identity Document Localization
      description: Delete a specific identity document localization by its ID.
      operationId: deleteIdentityDocumentLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the identity document localization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Identity document localization deleted successfully
        '404':
          description: Identity document localization not found
  '/api/v1/identity-document-categories/{categoryId}':
    get:
      tags:
        - Identity Document Categories
      summary: Get Identity Document Category
      description: Get a specific identity document category by its ID.
      operationId: getIdentityDocumentCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the identity document category
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the identity document category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCategoryCatalogDTO'
        '404':
          description: Identity document category not found
    put:
      tags:
        - Identity Document Categories
      summary: Update Identity Document Category
      description: Update a specific identity document category by its ID.
      operationId: updateIdentityDocumentCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the identity document category
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityDocumentCategoryCatalogDTO'
        required: true
      responses:
        '200':
          description: Identity document category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCategoryCatalogDTO'
        '400':
          description: Invalid input data
        '404':
          description: Identity document category not found
    delete:
      tags:
        - Identity Document Categories
      summary: Delete Identity Document Category
      description: Delete a specific identity document category by its ID.
      operationId: deleteIdentityDocumentCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the identity document category
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Identity document category deleted successfully
        '404':
          description: Identity document category not found
  '/api/v1/document-templates/{templateId}':
    get:
      tags:
        - Document Templates
      summary: Get Document Template by ID
      description: Retrieve a document template by its ID.
      operationId: getDocumentTemplate
      parameters:
        - name: templateId
          in: path
          description: ID of the document template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved document template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
        '404':
          description: Document template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
    put:
      tags:
        - Document Templates
      summary: Update Document Template
      description: Update an existing document template.
      operationId: updateDocumentTemplate
      parameters:
        - name: templateId
          in: path
          description: ID of the document template
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
        required: true
      responses:
        '200':
          description: Document template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
        '404':
          description: Document template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
    delete:
      tags:
        - Document Templates
      summary: Delete Document Template
      description: Delete a document template by its ID.
      operationId: deleteDocumentTemplate
      parameters:
        - name: templateId
          in: path
          description: ID of the document template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Document template deleted successfully
        '404':
          description: Document template not found
  '/api/v1/document-template-types/{typeId}':
    get:
      tags:
        - Document Template Types
      summary: Get Document Template Type by ID
      description: Retrieve a document template type by its ID.
      operationId: getDocumentTemplateType
      parameters:
        - name: typeId
          in: path
          description: ID of the document template type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved document template type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
        '404':
          description: Document template type not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
    put:
      tags:
        - Document Template Types
      summary: Update Document Template Type
      description: Update an existing document template type.
      operationId: updateDocumentTemplateType
      parameters:
        - name: typeId
          in: path
          description: ID of the document template type
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
        required: true
      responses:
        '200':
          description: Document template type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
        '404':
          description: Document template type not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
    delete:
      tags:
        - Document Template Types
      summary: Delete Document Template Type
      description: Delete a document template type by its ID.
      operationId: deleteDocumentTemplateType
      parameters:
        - name: typeId
          in: path
          description: ID of the document template type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Document template type deleted successfully
        '404':
          description: Document template type not found
  '/api/v1/document-template-localizations/{localizationId}':
    get:
      tags:
        - Document Template Localizations
      summary: Get Document Template Localization by ID
      description: Retrieve a document template localization by its ID.
      operationId: getDocumentTemplateLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the document template localization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved document template localization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
        '404':
          description: Document template localization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
    put:
      tags:
        - Document Template Localizations
      summary: Update Document Template Localization
      description: Update an existing document template localization.
      operationId: updateDocumentTemplateLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the document template localization
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
        required: true
      responses:
        '200':
          description: Document template localization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
        '404':
          description: Document template localization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
    delete:
      tags:
        - Document Template Localizations
      summary: Delete Document Template Localization
      description: Delete a document template localization by its ID.
      operationId: deleteDocumentTemplateLocalization
      parameters:
        - name: localizationId
          in: path
          description: ID of the document template localization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Document template localization deleted successfully
        '404':
          description: Document template localization not found
  '/api/v1/divisions/{divisionId}':
    get:
      tags:
        - Administrative Divisions
      summary: Get Administrative Division by ID
      description: Retrieve a specific administrative division by its ID.
      operationId: getDivision
      parameters:
        - name: divisionId
          in: path
          description: ID of the administrative division
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Administrative division retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativeDivisionDTO'
        '404':
          description: Administrative division not found
    put:
      tags:
        - Administrative Divisions
      summary: Update Administrative Division
      description: Update an existing administrative division by its ID.
      operationId: updateDivision
      parameters:
        - name: divisionId
          in: path
          description: ID of the administrative division
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdministrativeDivisionDTO'
        required: true
      responses:
        '200':
          description: Administrative division updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativeDivisionDTO'
        '404':
          description: Administrative division not found
    delete:
      tags:
        - Administrative Divisions
      summary: Delete Administrative Division
      description: Delete a specific administrative division by its ID.
      operationId: deleteDivision
      parameters:
        - name: divisionId
          in: path
          description: ID of the administrative division
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Administrative division deleted successfully
        '404':
          description: Administrative division not found
  '/api/v1/currencies/{currencyId}':
    get:
      tags:
        - Currencies
      summary: Get Currency by ID
      description: Retrieve a specific currency by its ID.
      operationId: getCurrency
      parameters:
        - name: currencyId
          in: path
          description: ID of the currency
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Currency retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDTO'
        '404':
          description: Currency not found
    put:
      tags:
        - Currencies
      summary: Update Currency
      description: Update an existing currency by its ID.
      operationId: updateCurrency
      parameters:
        - name: currencyId
          in: path
          description: ID of the currency
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyDTO'
        required: true
      responses:
        '200':
          description: Currency updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDTO'
        '404':
          description: Currency not found
    delete:
      tags:
        - Currencies
      summary: Delete Currency
      description: Delete a specific currency by its ID.
      operationId: deleteCurrency
      parameters:
        - name: currencyId
          in: path
          description: ID of the currency
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Currency deleted successfully
        '404':
          description: Currency not found
  '/api/v1/countries/{countryId}':
    get:
      tags:
        - Countries
      summary: Get Country by ID
      description: Retrieve a specific country by its ID.
      operationId: getCountry
      parameters:
        - name: countryId
          in: path
          description: ID of the country
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Country retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDTO'
        '404':
          description: Country not found
    put:
      tags:
        - Countries
      summary: Update Country
      description: Update an existing country by its ID.
      operationId: updateCountry
      parameters:
        - name: countryId
          in: path
          description: ID of the country
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryDTO'
        required: true
      responses:
        '200':
          description: Country updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDTO'
        '404':
          description: Country not found
    delete:
      tags:
        - Countries
      summary: Delete Country
      description: Delete a specific country by its ID.
      operationId: deleteCountry
      parameters:
        - name: countryId
          in: path
          description: ID of the country
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Country deleted successfully
        '404':
          description: Country not found
  '/api/v1/contract-types/{contractId}':
    get:
      tags:
        - Contract Type
      summary: Get Contract Type by ID
      description: Retrieve a specific contract type by its ID.
      operationId: getContractType
      parameters:
        - name: contractId
          in: path
          description: ID of the contract type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Contract type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTypeDTO'
        '404':
          description: Contract type not found
    put:
      tags:
        - Contract Type
      summary: Update Contract Type
      description: Update an existing contract type by its ID.
      operationId: updateContractType
      parameters:
        - name: contractId
          in: path
          description: ID of the contract type
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTypeDTO'
        required: true
      responses:
        '200':
          description: Contract type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTypeDTO'
        '404':
          description: Contract type not found
    delete:
      tags:
        - Contract Type
      summary: Delete Contract Type
      description: Delete a specific contract type by its ID.
      operationId: deleteContractType
      parameters:
        - name: contractId
          in: path
          description: ID of the contract type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Contract type deleted successfully
        '404':
          description: Contract type not found
  '/api/v1/consent-catalog/{id}':
    get:
      tags:
        - ConsentCatalog
      summary: Get Consent Catalog Entry by ID
      description: Retrieve a specific consent catalog entry by its ID.
      operationId: getConsentCatalog
      parameters:
        - name: id
          in: path
          description: ID of the consent catalog entry
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Consent catalog entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentCatalogDTO'
        '404':
          description: Consent catalog entry not found
    put:
      tags:
        - ConsentCatalog
      summary: Update Consent Catalog Entry
      description: Update an existing consent catalog entry by its ID.
      operationId: updateConsentCatalog
      parameters:
        - name: id
          in: path
          description: ID of the consent catalog entry
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentCatalogDTO'
        required: true
      responses:
        '200':
          description: Consent catalog entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentCatalogDTO'
        '404':
          description: Consent catalog entry not found
    delete:
      tags:
        - ConsentCatalog
      summary: Delete Consent Catalog Entry
      description: Delete a specific consent catalog entry by its ID.
      operationId: deleteConsentCatalog
      parameters:
        - name: id
          in: path
          description: ID of the consent catalog entry
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Consent catalog entry deleted successfully
        '404':
          description: Consent catalog entry not found
  '/api/v1/bank-institution-codes/{id}':
    get:
      tags:
        - BankInstitutionCodes
      summary: Get Bank Institution Code by ID
      description: Retrieve a specific bank or institution code by its ID.
      operationId: getBankInstitutionCode
      parameters:
        - name: id
          in: path
          description: ID of the bank institution code
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Bank institution code retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankInstitutionCodeDTO'
        '404':
          description: Bank institution code not found
    put:
      tags:
        - BankInstitutionCodes
      summary: Update Bank Institution Code
      description: Update an existing bank or institution code by its ID.
      operationId: updateBankInstitutionCode
      parameters:
        - name: id
          in: path
          description: ID of the bank institution code
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankInstitutionCodeDTO'
        required: true
      responses:
        '200':
          description: Bank institution code updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankInstitutionCodeDTO'
        '404':
          description: Bank institution code not found
    delete:
      tags:
        - BankInstitutionCodes
      summary: Delete Bank Institution Code
      description: Delete a specific bank or institution code by its ID.
      operationId: deleteBankInstitutionCode
      parameters:
        - name: id
          in: path
          description: ID of the bank institution code
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Bank institution code deleted successfully
        '404':
          description: Bank institution code not found
  '/api/v1/asset-types/{assetId}':
    get:
      tags:
        - Asset Type
      summary: Get Asset Type by ID
      description: Retrieve a specific asset type by its ID.
      operationId: getAssetType
      parameters:
        - name: assetId
          in: path
          description: ID of the asset type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Asset type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetTypeDTO'
        '404':
          description: Asset type not found
    put:
      tags:
        - Asset Type
      summary: Update Asset Type
      description: Update an existing asset type by its ID.
      operationId: updateAssetType
      parameters:
        - name: assetId
          in: path
          description: ID of the asset type
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetTypeDTO'
        required: true
      responses:
        '200':
          description: Asset type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetTypeDTO'
        '404':
          description: Asset type not found
    delete:
      tags:
        - Asset Type
      summary: Delete Asset Type
      description: Delete a specific asset type by its ID.
      operationId: deleteAssetType
      parameters:
        - name: assetId
          in: path
          description: ID of the asset type
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Asset type deleted successfully
        '404':
          description: Asset type not found
  '/api/v1/activity-codes/{activityCodeId}':
    get:
      tags:
        - Activity Codes
      summary: Get Activity Code by ID
      description: Retrieve a specific activity code by its ID.
      operationId: getActivityCode
      parameters:
        - name: activityCodeId
          in: path
          description: ID of the activity code
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Activity code retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityCodeDTO'
        '404':
          description: Activity code not found
    put:
      tags:
        - Activity Codes
      summary: Update Activity Code
      description: Update an existing activity code by its ID.
      operationId: updateActivityCode
      parameters:
        - name: activityCodeId
          in: path
          description: ID of the activity code
          required: true
          schema:
            type: integer
            format: int64
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityCodeDTO'
        required: true
      responses:
        '200':
          description: Activity code updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityCodeDTO'
        '404':
          description: Activity code not found
    delete:
      tags:
        - Activity Codes
      summary: Delete Activity Code
      description: Delete a specific activity code by its ID.
      operationId: deleteActivityCode
      parameters:
        - name: activityCodeId
          in: path
          description: ID of the activity code
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Activity code deleted successfully
        '404':
          description: Activity code not found
  /api/v1/transaction-category-localizations:
    post:
      tags:
        - Transaction Category Localization
      summary: Create Transaction Category Localization
      description: Create a new transaction category localization.
      operationId: createTransactionCategoryLocalization
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryLocalizationDTO'
        required: true
      responses:
        '200':
          description: Transaction category localization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryLocalizationDTO'
        '400':
          description: Invalid input data
  /api/v1/transaction-categories:
    get:
      tags:
        - Transaction Category Catalog
      summary: List All Transaction Categories
      description: Retrieve a paginated list of all transaction categories.
      operationId: listTransactionCategories
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of transaction categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Transaction Category Catalog
      summary: Create Transaction Category
      description: Create a new transaction category.
      operationId: createTransactionCategory
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryCatalogDTO'
        required: true
      responses:
        '200':
          description: Transaction category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryCatalogDTO'
        '400':
          description: Invalid input data
  /api/v1/titles:
    get:
      tags:
        - Title Master
      summary: List Titles
      description: Retrieve a paginated list of titles.
      operationId: listTitles
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of titles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Title Master
      summary: Create Title
      description: Create a new title master record.
      operationId: createTitle
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleMasterDTO'
        required: true
      responses:
        '200':
          description: Title created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleMasterDTO'
        '400':
          description: Invalid input data
  /api/v1/relationship-types:
    get:
      tags:
        - Relationship Type Master
      summary: List Relationship Types
      description: Retrieve a paginated list of relationship types.
      operationId: listRelationshipTypes
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of relationship types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Relationship Type Master
      summary: Create Relationship Type
      description: Create a new relationship type record.
      operationId: createRelationshipType
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipTypeMasterDTO'
        required: true
      responses:
        '200':
          description: Relationship type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipTypeMasterDTO'
        '400':
          description: Invalid input data
  /api/v1/notification-templates:
    get:
      tags:
        - Notification Message Templates
      summary: List Notification Message Templates
      description: Retrieve a paginated list of notification message templates.
      operationId: listNotificationMessageTemplates
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of notification message templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Notification Message Templates
      summary: Create Notification Message Template
      description: Create a new notification message template.
      operationId: createNotificationMessageTemplate
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationMessageTemplateDTO'
        required: true
      responses:
        '200':
          description: Notification message template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageTemplateDTO'
        '400':
          description: Invalid input data
  /api/v1/notification-messages:
    get:
      tags:
        - Notification Message Catalog
      summary: List Notification Messages
      description: Retrieve a paginated list of notification messages.
      operationId: listNotificationMessages
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of notification messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Notification Message Catalog
      summary: Create Notification Message
      description: Create a new notification message.
      operationId: createNotificationMessage
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationMessageCatalogDTO'
        required: true
      responses:
        '200':
          description: Notification message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageCatalogDTO'
        '400':
          description: Invalid input data
  /api/v1/notification-localizations:
    post:
      tags:
        - Notification Message Localizations
      summary: Create Notification Message Localization
      description: Create a new notification message localization.
      operationId: createNotificationMessageLocalization
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
        required: true
      responses:
        '200':
          description: Notification message localization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
        '400':
          description: Invalid input data
  /api/v1/message-types:
    get:
      tags:
        - Message Type Catalog
      summary: List Message Types
      description: Retrieve a paginated list of message types.
      operationId: listMessageTypes
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of message types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Message Type Catalog
      summary: Create Message Type
      description: Create a new message type.
      operationId: createMessageType
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageTypeCatalogDTO'
        required: true
      responses:
        '200':
          description: Message type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTypeCatalogDTO'
        '400':
          description: Invalid input data
  /api/v1/lookup/items:
    get:
      tags:
        - Lookup Items
      summary: List Lookup Items
      description: Retrieve a paginated list of lookup items.
      operationId: listItems
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of lookup items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Lookup Items
      summary: Create Lookup Item
      description: Create a new lookup item.
      operationId: createItem
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupItemDTO'
        required: true
      responses:
        '200':
          description: Lookup item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupItemDTO'
        '400':
          description: Invalid input data
  /api/v1/lookup/domains:
    get:
      tags:
        - Lookup Domains
      summary: List Lookup Domains
      description: Retrieve a paginated list of lookup domains.
      operationId: listDomains
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of lookup domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Lookup Domains
      summary: Create Lookup Domain
      description: Create a new lookup domain.
      operationId: createDomain
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupDomainDTO'
        required: true
      responses:
        '200':
          description: Lookup domain created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupDomainDTO'
        '400':
          description: Invalid input data
  /api/v1/legal-forms:
    get:
      tags:
        - Legal Forms
      summary: List Legal Forms
      description: Retrieve a paginated list of legal forms.
      operationId: listLegalForms
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of legal forms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Legal Forms
      summary: Create Legal Form
      description: Create a new legal form.
      operationId: createLegalForm
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalFormDTO'
        required: true
      responses:
        '200':
          description: Legal form created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalFormDTO'
        '400':
          description: Invalid input data
  /api/v1/language-locales:
    get:
      tags:
        - LanguageLocale
      summary: List LanguageLocales
      description: Retrieve a paginated list of language/locale records.
      operationId: listLanguageLocales
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of language locales
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - LanguageLocale
      summary: Create LanguageLocale
      description: Create a new language/locale entry.
      operationId: createLanguageLocale
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageLocaleDTO'
        required: true
      responses:
        '200':
          description: LanguageLocale entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageLocaleDTO'
        '400':
          description: Invalid input data
  /api/v1/identity-documents:
    get:
      tags:
        - Identity Documents
      summary: List Identity Documents
      description: Retrieve a paginated list of identity documents.
      operationId: listIdentityDocuments
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of identity documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Identity Documents
      summary: Create Identity Document
      description: Create a new identity document.
      operationId: createIdentityDocument
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityDocumentCatalogDTO'
        required: true
      responses:
        '200':
          description: Identity document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCatalogDTO'
        '400':
          description: Invalid input data
  /api/v1/identity-document-localizations:
    get:
      tags:
        - Identity Document Localizations
      summary: List Identity Document Localizations
      description: Retrieve a paginated list of identity document localizations.
      operationId: listIdentityDocumentLocalizations
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of identity document localizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Identity Document Localizations
      summary: Create Identity Document Localization
      description: Create a new identity document localization.
      operationId: createIdentityDocumentLocalization
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityDocumentLocalizationDTO'
        required: true
      responses:
        '200':
          description: Identity document localization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentLocalizationDTO'
        '400':
          description: Invalid input data
  /api/v1/identity-document-categories:
    get:
      tags:
        - Identity Document Categories
      summary: List Identity Document Categories
      description: Retrieve a paginated list of identity document categories.
      operationId: listIdentityDocumentCategories
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of identity document categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Identity Document Categories
      summary: Create Identity Document Category
      description: Create a new identity document category.
      operationId: createIdentityDocumentCategory
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityDocumentCategoryCatalogDTO'
        required: true
      responses:
        '200':
          description: Identity document category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCategoryCatalogDTO'
        '400':
          description: Invalid input data
  /api/v1/document-templates:
    get:
      tags:
        - Document Templates
      summary: List Document Templates
      description: Retrieve a paginated list of document templates.
      operationId: listDocumentTemplates
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of document templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Document Templates
      summary: Create Document Template
      description: Create a new document template.
      operationId: createDocumentTemplate
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
        required: true
      responses:
        '201':
          description: Document template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
  /api/v1/document-template-types:
    get:
      tags:
        - Document Template Types
      summary: List Document Template Types
      description: Retrieve a paginated list of document template types.
      operationId: listDocumentTemplateTypes
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of document template types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Document Template Types
      summary: Create Document Template Type
      description: Create a new document template type.
      operationId: createDocumentTemplateType
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
        required: true
      responses:
        '201':
          description: Document template type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
  /api/v1/document-template-localizations:
    post:
      tags:
        - Document Template Localizations
      summary: Create Document Template Localization
      description: Create a new document template localization.
      operationId: createDocumentTemplateLocalization
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
        required: true
      responses:
        '201':
          description: Document template localization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
  /api/v1/divisions:
    get:
      tags:
        - Administrative Divisions
      summary: List Administrative Divisions
      description: Retrieve a paginated list of administrative divisions.
      operationId: listDivisions
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of administrative divisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Administrative Divisions
      summary: Create Administrative Division
      description: Create a new administrative division.
      operationId: createDivision
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdministrativeDivisionDTO'
        required: true
      responses:
        '200':
          description: Administrative division created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativeDivisionDTO'
        '400':
          description: Invalid input data
  /api/v1/currencies:
    get:
      tags:
        - Currencies
      summary: List Currencies
      description: Retrieve a paginated list of currencies.
      operationId: listCurrencies
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of currencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Currencies
      summary: Create Currency
      description: Create a new currency.
      operationId: createCurrency
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyDTO'
        required: true
      responses:
        '200':
          description: Currency created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDTO'
        '400':
          description: Invalid input data
  /api/v1/countries/filter:
    post:
      tags:
        - Countries
      summary: List Countries
      description: Retrieve a paginated list of countries.
      operationId: filterCountries
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestCountryDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved list of countries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponseCountryDTO'
  /api/v1/countries:
    post:
      tags:
        - Countries
      summary: Create Country
      description: Create a new country.
      operationId: createCountry
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryDTO'
        required: true
      responses:
        '200':
          description: Country created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDTO'
        '400':
          description: Invalid input data
  /api/v1/contract-types:
    get:
      tags:
        - Contract Type
      summary: List Contract Types
      description: Retrieve a paginated list of contract types.
      operationId: listContractTypes
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of contract types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Contract Type
      summary: Create Contract Type
      description: Create a new contract type record.
      operationId: createContractType
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTypeDTO'
        required: true
      responses:
        '200':
          description: Contract type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTypeDTO'
        '400':
          description: Invalid input data
  /api/v1/consent-catalog:
    get:
      tags:
        - ConsentCatalog
      summary: List Consent Catalog
      description: Retrieve a paginated list of consent catalog entries.
      operationId: listConsentCatalog
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of consent catalog entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - ConsentCatalog
      summary: Create Consent Catalog Entry
      description: Create a new consent catalog entry.
      operationId: createConsentCatalog
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentCatalogDTO'
        required: true
      responses:
        '200':
          description: Consent catalog entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentCatalogDTO'
        '400':
          description: Invalid input data
  /api/v1/bank-institution-codes:
    get:
      tags:
        - BankInstitutionCodes
      summary: List Bank Institution Codes
      description: Retrieve a paginated list of bank or institution codes.
      operationId: listBankInstitutionCodes
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of bank/institution codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - BankInstitutionCodes
      summary: Create Bank Institution Code
      description: Create a new bank or institution code.
      operationId: createBankInstitutionCode
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankInstitutionCodeDTO'
        required: true
      responses:
        '200':
          description: Bank institution code created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankInstitutionCodeDTO'
        '400':
          description: Invalid input data
  /api/v1/asset-types:
    get:
      tags:
        - Asset Type
      summary: List Asset Types
      description: Retrieve a paginated list of asset types.
      operationId: listAssetTypes
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of asset types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Asset Type
      summary: Create Asset Type
      description: Create a new asset type record.
      operationId: createAssetType
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetTypeDTO'
        required: true
      responses:
        '200':
          description: Asset type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetTypeDTO'
        '400':
          description: Invalid input data
  /api/v1/activity-codes:
    get:
      tags:
        - Activity Codes
      summary: List Activity Codes
      description: Retrieve a paginated list of activity codes.
      operationId: listActivityCodes
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of activity codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Activity Codes
      summary: Create Activity Code
      description: Create a new activity code.
      operationId: createActivityCode
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: >-
            Unique key for idempotent requests. If provided, ensures that
            identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityCodeDTO'
        required: true
      responses:
        '200':
          description: Activity code created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityCodeDTO'
        '400':
          description: Invalid input data
  '/api/v1/transaction-category-localizations/category/{categoryId}/paginated':
    get:
      tags:
        - Transaction Category Localization
      summary: List Localizations by Category with Pagination
      description: >-
        Retrieve a paginated list of localizations for a specific transaction
        category.
      operationId: listLocalizationsByCategoryId
      parameters:
        - name: categoryId
          in: path
          description: ID of the transaction category
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: >-
            Successfully retrieved paginated localizations for the specified
            category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/transaction-category-localizations/category/{categoryId}/locale/{localeId}':
    get:
      tags:
        - Transaction Category Localization
      summary: Get Localization by Category and Locale
      description: >-
        Retrieve a transaction category localization by category ID and locale
        ID.
      operationId: getTransactionCategoryLocalizationByCategoryAndLocale
      parameters:
        - name: categoryId
          in: path
          description: ID of the transaction category
          required: true
          schema:
            type: integer
            format: int64
        - name: localeId
          in: path
          description: ID of the locale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the transaction category localization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryLocalizationDTO'
        '404':
          description: Transaction category localization not found
  '/api/v1/transaction-category-localizations/category/{categoryId}':
    get:
      tags:
        - Transaction Category Localization
      summary: List Localizations by Category
      description: Retrieve all localizations for a specific transaction category.
      operationId: getLocalizationsByCategoryId
      parameters:
        - name: categoryId
          in: path
          description: ID of the transaction category
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved localizations for the specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryLocalizationDTO'
        '404':
          description: No localizations found for the specified category
  /api/v1/transaction-categories/root:
    get:
      tags:
        - Transaction Category Catalog
      summary: List Root Transaction Categories
      description: >-
        Retrieve a paginated list of root transaction categories (categories
        without a parent).
      operationId: listRootTransactionCategories
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of root transaction categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/transaction-categories/parent/{parentCategoryId}':
    get:
      tags:
        - Transaction Category Catalog
      summary: List Child Transaction Categories
      description: >-
        Retrieve a paginated list of child transaction categories for a specific
        parent category.
      operationId: listChildTransactionCategories
      parameters:
        - name: parentCategoryId
          in: path
          description: ID of the parent category
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of child transaction categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/transaction-categories/code/{categoryCode}':
    get:
      tags:
        - Transaction Category Catalog
      summary: Get Transaction Category by Code
      description: Retrieve a transaction category by its code.
      operationId: getTransactionCategoryByCode
      parameters:
        - name: categoryCode
          in: path
          description: Code of the transaction category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the transaction category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryCatalogDTO'
        '404':
          description: Transaction category not found
  '/api/v1/notification-templates/type/{templateType}':
    get:
      tags:
        - Notification Message Templates
      summary: List Notification Message Templates by Type
      description: >-
        Retrieve a paginated list of notification message templates for a
        specific template type.
      operationId: listNotificationMessageTemplatesByType
      parameters:
        - name: templateType
          in: path
          description: Template type
          required: true
          schema:
            type: string
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of notification message templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/notification-templates/message/{messageId}/name/{templateName}':
    get:
      tags:
        - Notification Message Templates
      summary: Get Notification Message Template by Name and Message ID
      description: >-
        Retrieve a specific notification message template by its name and
        message ID.
      operationId: getNotificationMessageTemplateByNameAndMessageId
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
        - name: templateName
          in: path
          description: Name of the template
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification message template retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageTemplateDTO'
        '404':
          description: Notification message template not found
  '/api/v1/notification-templates/message/{messageId}':
    get:
      tags:
        - Notification Message Templates
      summary: Get Templates by Message ID
      description: Retrieve all templates for a specific notification message.
      operationId: getTemplatesByMessageId
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageTemplateDTO'
    delete:
      tags:
        - Notification Message Templates
      summary: Delete Templates by Message ID
      description: Delete all templates for a specific notification message.
      operationId: deleteTemplatesByMessageId
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Templates deleted successfully
        '404':
          description: Notification message not found
  '/api/v1/notification-messages/message-type/{typeId}':
    get:
      tags:
        - Notification Message Catalog
      summary: List Notification Messages by Message Type
      description: >-
        Retrieve a paginated list of notification messages for a specific
        message type.
      operationId: listNotificationMessagesByTypeId
      parameters:
        - name: typeId
          in: path
          description: Message type ID
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of notification messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/notification-messages/event-type/{eventType}':
    get:
      tags:
        - Notification Message Catalog
      summary: List Notification Messages by Event Type
      description: >-
        Retrieve a paginated list of notification messages for a specific event
        type.
      operationId: listNotificationMessagesByEventType
      parameters:
        - name: eventType
          in: path
          description: Event type
          required: true
          schema:
            type: string
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of notification messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/notification-messages/code/{messageCode}':
    get:
      tags:
        - Notification Message Catalog
      summary: Get Notification Message by Code
      description: Retrieve a specific notification message by its code.
      operationId: getNotificationMessageByCode
      parameters:
        - name: messageCode
          in: path
          description: Code of the notification message
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification message retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageCatalogDTO'
        '404':
          description: Notification message not found
  '/api/v1/notification-localizations/message/{messageId}/locale/{localeId}':
    get:
      tags:
        - Notification Message Localizations
      summary: Get Notification Message Localization by Message and Locale
      description: >-
        Retrieve a specific notification message localization by message ID and
        locale ID.
      operationId: getNotificationMessageLocalizationByMessageAndLocale
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
        - name: localeId
          in: path
          description: ID of the language locale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Notification message localization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
        '404':
          description: Notification message localization not found
  '/api/v1/notification-localizations/message/{messageId}':
    get:
      tags:
        - Notification Message Localizations
      summary: Get Localizations by Message ID
      description: Retrieve all localizations for a specific notification message.
      operationId: getLocalizationsByMessageId
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved localizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
    delete:
      tags:
        - Notification Message Localizations
      summary: Delete Localizations by Message ID
      description: Delete all localizations for a specific notification message.
      operationId: deleteLocalizationsByMessageId
      parameters:
        - name: messageId
          in: path
          description: ID of the notification message
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Localizations deleted successfully
        '404':
          description: Notification message not found
  '/api/v1/notification-localizations/locale/{localeId}':
    get:
      tags:
        - Notification Message Localizations
      summary: Get Localizations by Locale ID
      description: Retrieve all localizations for a specific locale.
      operationId: getLocalizationsByLocaleId
      parameters:
        - name: localeId
          in: path
          description: ID of the language locale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved localizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationMessageLocalizationDTO'
  '/api/v1/message-types/code/{typeCode}':
    get:
      tags:
        - Message Type Catalog
      summary: Get Message Type by Code
      description: Retrieve a specific message type by its code.
      operationId: getMessageTypeByCode
      parameters:
        - name: typeCode
          in: path
          description: Code of the message type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTypeCatalogDTO'
        '404':
          description: Message type not found
  '/api/v1/lookup/items/domain/{domainId}':
    get:
      tags:
        - Lookup Items
      summary: Get Lookup Items by Domain
      description: Retrieve all lookup items for a specific domain.
      operationId: getItemsByDomain
      parameters:
        - name: domainId
          in: path
          description: ID of the domain
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved lookup items for the domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupItemDTO'
  '/api/v1/legal-forms/country/{countryId}':
    get:
      tags:
        - Legal Forms
      summary: Get Legal Forms by Country
      description: Retrieve all legal forms for a specific country.
      operationId: getLegalFormsByCountry
      parameters:
        - name: countryId
          in: path
          description: ID of the country
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved legal forms for the country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalFormDTO'
  '/api/v1/identity-documents/country/{countryId}':
    get:
      tags:
        - Identity Documents
      summary: List Identity Documents by Country
      description: Retrieve a paginated list of identity documents for a specific country.
      operationId: listIdentityDocumentsByCountry
      parameters:
        - name: countryId
          in: path
          description: ID of the country
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: >-
            Successfully retrieved list of identity documents for the specified
            country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/identity-documents/code/{documentCode}':
    get:
      tags:
        - Identity Documents
      summary: Get Identity Document by Code
      description: Get a specific identity document by its code.
      operationId: getIdentityDocumentByCode
      parameters:
        - name: documentCode
          in: path
          description: Code of the identity document
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the identity document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCatalogDTO'
        '404':
          description: Identity document not found
  '/api/v1/identity-documents/category/{categoryId}':
    get:
      tags:
        - Identity Documents
      summary: List Identity Documents by Category
      description: Retrieve a paginated list of identity documents of a specific category.
      operationId: listIdentityDocumentsByCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the identity document category
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: >-
            Successfully retrieved list of identity documents of the specified
            category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/identity-document-localizations/document/{documentId}/locale/{localeId}':
    get:
      tags:
        - Identity Document Localizations
      summary: Get Identity Document Localization by Document and Locale
      description: >-
        Get a specific identity document localization by document ID and locale
        ID.
      operationId: getIdentityDocumentLocalizationByDocumentAndLocale
      parameters:
        - name: documentId
          in: path
          description: ID of the identity document
          required: true
          schema:
            type: integer
            format: int64
        - name: localeId
          in: path
          description: ID of the language locale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the identity document localization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentLocalizationDTO'
        '404':
          description: Identity document localization not found
  '/api/v1/identity-document-localizations/document/{documentId}':
    get:
      tags:
        - Identity Document Localizations
      summary: List Localizations by Document ID
      description: >-
        Retrieve a paginated list of localizations for a specific identity
        document.
      operationId: getLocalizationsByDocumentId
      parameters:
        - name: documentId
          in: path
          description: ID of the identity document
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: >-
            Successfully retrieved list of localizations for the specified
            document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
    delete:
      tags:
        - Identity Document Localizations
      summary: Delete Localizations by Document ID
      description: Delete all localizations for a specific identity document.
      operationId: deleteLocalizationsByDocumentId
      parameters:
        - name: documentId
          in: path
          description: ID of the identity document
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Identity document localizations deleted successfully
        '404':
          description: Identity document not found
  '/api/v1/identity-document-categories/code/{categoryCode}':
    get:
      tags:
        - Identity Document Categories
      summary: Get Identity Document Category by Code
      description: Get a specific identity document category by its code.
      operationId: getIdentityDocumentCategoryByCode
      parameters:
        - name: categoryCode
          in: path
          description: Code of the identity document category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the identity document category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDocumentCategoryCatalogDTO'
        '404':
          description: Identity document category not found
  '/api/v1/document-templates/type/{typeId}':
    get:
      tags:
        - Document Templates
      summary: List Document Templates by Type
      description: >-
        Retrieve a paginated list of document templates for a specific template
        type.
      operationId: listDocumentTemplatesByTypeId
      parameters:
        - name: typeId
          in: path
          description: Template type ID
          required: true
          schema:
            type: integer
            format: int64
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of document templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/document-templates/code/{templateCode}':
    get:
      tags:
        - Document Templates
      summary: Get Document Template by Code
      description: Retrieve a document template by its code.
      operationId: getDocumentTemplateByCode
      parameters:
        - name: templateCode
          in: path
          description: Code of the document template
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved document template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
        '404':
          description: Document template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateCatalogDTO'
  '/api/v1/document-templates/category/{category}':
    get:
      tags:
        - Document Templates
      summary: List Document Templates by Category
      description: Retrieve a paginated list of document templates for a specific category.
      operationId: listDocumentTemplatesByCategory
      parameters:
        - name: category
          in: path
          description: Category of templates
          required: true
          schema:
            type: string
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved list of document templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/document-template-types/code/{typeCode}':
    get:
      tags:
        - Document Template Types
      summary: Get Document Template Type by Code
      description: Retrieve a document template type by its code.
      operationId: getDocumentTemplateTypeByCode
      parameters:
        - name: typeCode
          in: path
          description: Code of the document template type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved document template type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
        '404':
          description: Document template type not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
  '/api/v1/document-template-localizations/template/{templateId}/locale/{localeId}':
    get:
      tags:
        - Document Template Localizations
      summary: Get Document Template Localization by Template and Locale
      description: Retrieve a document template localization by template ID and locale ID.
      operationId: getDocumentTemplateLocalizationByTemplateAndLocale
      parameters:
        - name: templateId
          in: path
          description: ID of the document template
          required: true
          schema:
            type: integer
            format: int64
        - name: localeId
          in: path
          description: ID of the language locale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved document template localization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
        '404':
          description: Document template localization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
  '/api/v1/document-template-localizations/template/{templateId}':
    get:
      tags:
        - Document Template Localizations
      summary: Get Localizations by Template ID
      description: Retrieve all localizations for a specific document template.
      operationId: getLocalizationsByTemplateId
      parameters:
        - name: templateId
          in: path
          description: ID of the document template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved localizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
        '404':
          description: No localizations found for the specified template
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
    delete:
      tags:
        - Document Template Localizations
      summary: Delete Localizations by Template ID
      description: Delete all localizations for a specific document template.
      operationId: deleteLocalizationsByTemplateId
      parameters:
        - name: templateId
          in: path
          description: ID of the document template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Document template localizations deleted successfully
  '/api/v1/document-template-localizations/locale/{localeId}':
    get:
      tags:
        - Document Template Localizations
      summary: Get Localizations by Locale ID
      description: Retrieve all localizations for a specific locale.
      operationId: getLocalizationsByLocaleId_1
      parameters:
        - name: localeId
          in: path
          description: ID of the language locale
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved localizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
        '404':
          description: No localizations found for the specified locale
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentTemplateLocalizationDTO'
  '/api/v1/consent-catalog/type/{consentType}':
    get:
      tags:
        - ConsentCatalog
      summary: List Consent Catalog by Type
      description: Retrieve a paginated list of consent catalog entries of a specific type.
      operationId: listConsentCatalogByType
      parameters:
        - name: consentType
          in: path
          description: Type of consent
          required: true
          schema:
            type: string
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: 'The direction of sorting, either ASC or DESC.'
          required: false
          schema:
            type: string
            description: 'The direction of sorting, either ASC or DESC.'
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: >-
            Successfully retrieved list of consent catalog entries of the
            specified type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
  '/api/v1/activity-codes/parent/{parentCodeId}':
    get:
      tags:
        - Activity Codes
      summary: Get Child Activity Codes
      description: Retrieve all child activity codes for a specific parent activity code.
      operationId: getChildActivityCodes
      parameters:
        - name: parentCodeId
          in: path
          description: ID of the parent activity code
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved child activity codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityCodeDTO'
  '/api/v1/activity-codes/country/{countryId}':
    get:
      tags:
        - Activity Codes
      summary: Get Activity Codes by Country
      description: Retrieve all activity codes for a specific country.
      operationId: getActivityCodesByCountry
      parameters:
        - name: countryId
          in: path
          description: ID of the country
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved activity codes for the country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityCodeDTO'
components:
  schemas:
    TransactionCategoryLocalizationDTO:
      type: object
      properties:
        localizationId:
          type: integer
          format: int64
          writeOnly: true
        categoryId:
          type: integer
          format: int64
        localeId:
          type: integer
          format: int64
        categoryName:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    TransactionCategoryCatalogDTO:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
          writeOnly: true
        categoryCode:
          type: string
        categoryName:
          type: string
        description:
          type: string
        parentCategoryId:
          type: integer
          format: int64
        parentCategory:
          $ref: '#/components/schemas/TransactionCategoryCatalogDTO'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
        svgIcon:
          type: string
    TitleMasterDTO:
      type: object
      properties:
        titleId:
          type: integer
          format: int64
          readOnly: true
        prefix:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    RelationshipTypeMasterDTO:
      type: object
      properties:
        relationshipTypeId:
          type: integer
          format: int64
          readOnly: true
        code:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    NotificationMessageTemplateDTO:
      type: object
      properties:
        templateId:
          type: integer
          format: int64
          writeOnly: true
        messageId:
          type: integer
          format: int64
        templateName:
          type: string
        templateContent:
          type: string
        templateType:
          type: string
        version:
          type: string
        templateVariables:
          type: object
          additionalProperties:
            type: object
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    MessageTypeCatalogDTO:
      type: object
      properties:
        typeId:
          type: integer
          format: int64
          writeOnly: true
        typeCode:
          type: string
        typeName:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    NotificationMessageCatalogDTO:
      type: object
      properties:
        messageId:
          type: integer
          format: int64
          writeOnly: true
        messageCode:
          type: string
        typeId:
          type: integer
          format: int64
        messageType:
          $ref: '#/components/schemas/MessageTypeCatalogDTO'
        eventType:
          type: string
        description:
          type: string
        defaultSubject:
          type: string
        defaultMessage:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    NotificationMessageLocalizationDTO:
      type: object
      properties:
        localizationId:
          type: integer
          format: int64
          writeOnly: true
        messageId:
          type: integer
          format: int64
        localeId:
          type: integer
          format: int64
        subject:
          type: string
        message:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    LookupItemDTO:
      type: object
      properties:
        itemId:
          type: integer
          format: int64
        domainId:
          type: integer
          format: int64
        itemCode:
          type: string
        itemLabelDefault:
          type: string
        itemDesc:
          type: string
        parentItemId:
          type: integer
          format: int64
        sortOrder:
          type: integer
          format: int32
        effectiveFrom:
          type: string
          format: date
        effectiveTo:
          type: string
          format: date
        isCurrent:
          type: boolean
        extraJson:
          type: string
        tenantId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
    LookupDomainDTO:
      type: object
      properties:
        domainId:
          type: integer
          format: int64
        domainCode:
          type: string
        domainName:
          type: string
        domainDesc:
          type: string
        parentDomainId:
          type: integer
          format: int64
        multiselectAllowed:
          type: boolean
        hierarchyAllowed:
          type: boolean
        tenantOverridable:
          type: boolean
        extraJson:
          type: string
        tenantId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
    LegalFormDTO:
      type: object
      properties:
        legalFormId:
          type: integer
          format: int64
        countryId:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        description:
          type: string
        isCorporate:
          type: boolean
        entityType:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
    LanguageLocaleDTO:
      type: object
      properties:
        localeId:
          type: integer
          format: int64
        languageCode:
          type: string
        countryCode:
          type: string
        localeCode:
          type: string
        languageName:
          type: string
        nativeName:
          type: string
        regionName:
          type: string
        rtl:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    IdentityDocumentCatalogDTO:
      type: object
      properties:
        documentId:
          type: integer
          format: int64
          writeOnly: true
        documentCode:
          type: string
        documentName:
          type: string
        categoryId:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/IdentityDocumentCategoryCatalogDTO'
        countryId:
          type: integer
          format: int64
        description:
          type: string
        validationRegex:
          type: string
        formatDescription:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    IdentityDocumentCategoryCatalogDTO:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
          writeOnly: true
        categoryCode:
          type: string
        categoryName:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    IdentityDocumentLocalizationDTO:
      type: object
      properties:
        localizationId:
          type: integer
          format: int64
          writeOnly: true
        documentId:
          type: integer
          format: int64
        localeId:
          type: integer
          format: int64
        documentName:
          type: string
        description:
          type: string
        formatDescription:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    DocumentTemplateCatalogDTO:
      type: object
      properties:
        templateId:
          type: integer
          format: int64
          writeOnly: true
        templateCode:
          type: string
        typeId:
          type: integer
          format: int64
        templateType:
          $ref: '#/components/schemas/DocumentTemplateTypeCatalogDTO'
        category:
          type: string
        description:
          type: string
        templateName:
          type: string
        templateContent:
          type: string
        templateVariables:
          type: object
          additionalProperties:
            type: object
        version:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    DocumentTemplateTypeCatalogDTO:
      type: object
      properties:
        typeId:
          type: integer
          format: int64
          writeOnly: true
        typeCode:
          type: string
        typeName:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    DocumentTemplateLocalizationDTO:
      type: object
      properties:
        localizationId:
          type: integer
          format: int64
          writeOnly: true
        templateId:
          type: integer
          format: int64
        localeId:
          type: integer
          format: int64
        templateName:
          type: string
        templateContent:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    AdministrativeDivisionDTO:
      type: object
      properties:
        divisionId:
          type: integer
          format: int64
        countryId:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        level:
          type: string
        parentDivisionId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        postalCodePattern:
          type: string
        timeZone:
          type: string
    CurrencyDTO:
      type: object
      properties:
        currencyId:
          type: integer
          format: int64
        isoCode:
          type: string
        currencyName:
          type: string
        symbol:
          type: string
        decimalPrecision:
          type: integer
          format: int32
        isMajor:
          type: boolean
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    CountryDTO:
      type: object
      properties:
        countryId:
          type: integer
          format: int64
          readOnly: true
        isoCode:
          type: string
        countryName:
          type: string
        region:
          type: string
          enum:
            - EUROPE
            - AMERICAS
            - APAC
            - OCEANIA
            - ASIA
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        svgFlag:
          type: string
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    ContractTypeDTO:
      type: object
      properties:
        contractId:
          type: integer
          format: int64
          readOnly: true
        contractCode:
          type: string
        description:
          type: string
        name:
          type: string
        isActive:
          type: boolean
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    ConsentCatalogDTO:
      type: object
      properties:
        consentId:
          type: integer
          format: int64
          writeOnly: true
        consentType:
          type: string
        consentDescription:
          type: string
        expiryPeriodDays:
          type: integer
          format: int32
        consentVersion:
          type: string
        consentSource:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    BankInstitutionCodeDTO:
      type: object
      properties:
        institutionId:
          type: integer
          format: int64
        bankName:
          type: string
        swiftCode:
          type: string
        routingNumber:
          type: string
        ibanPrefix:
          type: string
        countryId:
          type: integer
          format: int64
        institutionTypeLkpId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        svgIcon:
          type: string
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    AssetTypeDTO:
      type: object
      properties:
        assetId:
          type: integer
          format: int64
          readOnly: true
        assetCode:
          type: string
        description:
          type: string
        name:
          type: string
        isActive:
          type: boolean
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
    ActivityCodeDTO:
      type: object
      properties:
        activityCodeId:
          type: integer
          format: int64
        countryId:
          type: integer
          format: int64
        code:
          type: string
        classificationSys:
          type: string
        description:
          type: string
        parentCodeId:
          type: integer
          format: int64
        highRisk:
          type: boolean
        riskFactors:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
    FilterOptions:
      type: object
      properties:
        caseInsensitiveStrings:
          type: boolean
        includeInheritedFields:
          type: boolean
      description: Filter options for customizing filter behavior
    FilterRequestCountryDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/CountryDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    PaginationRequest:
      type: object
      properties:
        pageNumber:
          type: integer
          description: The zero-based page number to retrieve.
          format: int32
          example: 0
          default: 0
        pageSize:
          type: integer
          description: The number of items per page.
          format: int32
          example: 10
          default: 10
        sortBy:
          type: string
          description: The field to sort the results by.
          example: name
        sortDirection:
          type: string
          description: 'The direction of sorting, either ASC or DESC.'
          example: DESC
          default: DESC
      description: >-
        Represents a pagination request for retrieving paginated results,
        including page number, size, sort field, and direction.
    RangeFilter:
      type: object
      properties:
        ranges:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RangeObject'
          description: Map of field names to their range criteria
      description: Represents range filters for numeric fields
    RangeObject:
      type: object
      properties:
        from:
          type: object
          description: Start value of the range
        to:
          type: object
          description: End value of the range
      description: Represents a range with from and to values
    PaginationResponseCountryDTO:
      type: object
      properties:
        content:
          type: array
          description: The list of items for the current page.
          items:
            $ref: '#/components/schemas/CountryDTO'
        totalElements:
          type: integer
          description: The total number of elements across all pages.
          format: int64
        totalPages:
          type: integer
          description: The total number of pages based on the data size and page size.
          format: int32
        currentPage:
          type: integer
          description: 'The current page number, typically zero-based.'
          format: int32
      description: >-
        Represents a paginated response containing a list of items and
        pagination metadata.
    PaginationResponse:
      type: object
      properties:
        content:
          type: array
          description: The list of items for the current page.
          items:
            type: object
            description: The list of items for the current page.
        totalElements:
          type: integer
          description: The total number of elements across all pages.
          format: int64
        totalPages:
          type: integer
          description: The total number of pages based on the data size and page size.
          format: int32
        currentPage:
          type: integer
          description: 'The current page number, typically zero-based.'
          format: int32
      description: >-
        Represents a paginated response containing a list of items and
        pagination metadata.
